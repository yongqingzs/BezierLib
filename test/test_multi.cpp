#include "bezier.hpp"

#ifdef _WIN32
#include <windows.h>
#endif

/* 
1.
double c[6][3] = {
    {-13854.162565, -13642.381203, 0.650036},
    {-13767.754324, -13491.681586, 0.649824},
    {-13517.080820, -13215.950545, 0.649948},
    {-13395.398156, -13038.395554, 0.649807},
    {-13197.423769, -12802.778147, 0.649848},
    {-12996.951312, -12565.258044, 0.649890}
};
double target[3] = {0.0, 0.0, 0.0};
double target_r = 5000.0;
double target_l = 9443.569252 + target_r;
double r_min = 3500.0;

2.
double c[6][3] = {
    {-15283.902929, -47606.746489, 1.260146},
    {-15116.767973, -47660.081054, 1.263655},
    {-14949.446907, -47712.828853, 1.267163},
    {-14781.941791, -47764.989238, 1.270672},
    {-14614.254687, -47816.561565, 1.274181},
    {-14446.387661, -47867.545201, 1.277690}
};
double target[3] = {0.0, 0.0, 0.0};
double target_r = 5000.0;
double target_l = 50000;
double r_min = 8000;

[pi/3]
{ -24847.912137, -43388.722756, 1.050706 },
{ -24695.518360, -43475.641145, 1.054215 },
{ -24542.820545, -43562.024284, 1.057724 },
{ -24389.820571, -43647.871111, 1.061233 },
{ -24236.520323, -43733.180568, 1.064741 },
{ -24082.921688, -43817.951606, 1.068250 }

[pi/4]
{ -35231.067855, -35479.174988, 0.788907 },
{ -35106.362904, -35602.574116, 0.792416 },
{ -34981.225742, -35725.534924, 0.795924 },
{ -34855.657910, -35848.055898, 0.799433 },
{ -34729.660953, -35970.135530, 0.802942 },
{ -34603.236424, -36091.772317, 0.806451 }

[pi/6]
{ -43213.284520, -25151.780076, 0.527108 },
{ -43124.766832, -25303.250497, 0.530616 },
{ -43035.718214, -25454.409398, 0.534125 },
{ -42946.139764, -25605.254918, 0.537634 },
{ -42856.032583, -25755.785199, 0.541143 },
{ -42765.397782, -25905.998389, 0.544651 }

[pi/10]
{ -47498.319696, -15617.606285, 0.317668 },
{ -47443.228803, -15784.170577, 0.321177 },
{ -47387.553814, -15950.540541, 0.324686 },
{ -47331.295414, -16116.714131, 0.328194 },
{ -47274.454297, -16282.689301, 0.331703 },
{ -47217.031163, -16448.464007, 0.335212 }

[pi/30]
{ -49707.450379, -5400.868158, 0.108229 },
{ -49688.194017, -5575.246661, 0.111737 },
{ -49668.325921, -5749.556524, 0.115246 },
{ -49647.846335, -5923.795601, 0.118755 },
{ -49626.755511, -6097.961748, 0.122264 },
{ -49605.053708, -6272.052820, 0.125772 }

[0]
{ -49999.692213, -175.438237, 0.003509 },
{ -49998.768857, -350.874313, 0.007018 },
{ -49997.229942, -526.306070, 0.010526 },
{ -49995.075489, -701.731347, 0.014035 },
{ -49992.305522, -877.147985, 0.017544 },
{ -49988.920077, -1052.553824, 0.021053 }

[-pi/30]
{ -49744.126957, 5051.913823, -0.101211 },
{ -49761.546723, 4877.342287, -0.097702 },
{ -49778.353850, 4702.710703, -0.094193 },
{ -49794.548133, 4528.021222, -0.090685 },
{ -49810.129373, 4353.275995, -0.087176 },
{ -49825.097376, 4178.477172, -0.083667 }

[-pi/10]
{ -47606.746489, 15283.902929, -0.310650 },
{ -47660.081054, 15116.767973, -0.307142 },
{ -47712.828853, 14949.446907, -0.303633 },
{ -47764.989238, 14781.941791, -0.300124 },
{ -47816.561565, 14614.254687, -0.296615 },
{ -47867.545201, 14446.387661, -0.293107 }

[-pi/6]
{ -43388.722756, 24847.912137, -0.520090 },
{ -43475.641145, 24695.518360, -0.516581 },
{ -43562.024284, 24542.820545, -0.513072 },
{ -43647.871111, 24389.820571, -0.509564 },
{ -43733.180568, 24236.520323, -0.506055 },
{ -43817.951606, 24082.921688, -0.502546 }

[-pi/4]
{ -35479.174988, 35231.067855, -0.781889 },
{ -35602.574116, 35106.362904, -0.778381 },
{ -35725.534924, 34981.225742, -0.774872 },
{ -35848.055898, 34855.657910, -0.771363 },
{ -35970.135530, 34729.660953, -0.767854 },
{ -36091.772317, 34603.236424, -0.764346 }

[-pi/3]
{ -25151.780076, 43213.284520, -1.043689 },
{ -25303.250497, 43124.766832, -1.040180 },
{ -25454.409398, 43035.718214, -1.036671 },
{ -25605.254918, 42946.139764, -1.033162 },
{ -25755.785199, 42856.032583, -1.029654 },
{ -25905.998389, 42765.397782, -1.026145 }

[-pi/2.5]
{ -15617.606285, 47498.319696, -1.253128 },
{ -15784.170577, 47443.228803, -1.249620 },
{ -15950.540541, 47387.553814, -1.246111 },
{ -16116.714131, 47331.295414, -1.242602 },
{ -16282.689301, 47274.454297, -1.239093 },
{ -16448.464007, 47217.031163, -1.235584 }

*/

int main() {
#ifdef _WIN32
    SetConsoleOutputCP(CP_UTF8);
#endif
    double c[6][3] = {
        { -47606.746489, 15283.902929, -0.310650 },
        { -47660.081054, 15116.767973, -0.307142 },
        { -47712.828853, 14949.446907, -0.303633 },
        { -47764.989238, 14781.941791, -0.300124 },
        { -47816.561565, 14614.254687, -0.296615 },
        { -47867.545201, 14446.387661, -0.293107 }
    };
    double target[3] = {0.0, 0.0, 0.0};
    double target_r = 10000.0;
    double target_l = 50000;
    double r_min = 6000;

    // 创建初始数据结构
    bezier::InitData init;
    init.nodes.resize(6);
    init.node_num = 6;
    for (int i = 0; i < 6; i++)
    {
        init.nodes[i].start_point = {c[i][0], c[i][1]};
        init.nodes[i].heading = c[i][2];  // 航向角(弧度)，0表示正北方向
        init.nodes[i].r_min = r_min;  // 最小转弯半径
    }
    init.target_point = {target[0], target[1]};
    
    // 设置优化参数
    bezier::OptParms opt;
    opt.num_samlpes = 10;                // 采样点数量
    opt.target_length = target_l;           // 期望路径长度
    opt.target_radius = target_r;            // 目标半径
    opt.fixed_angle = bezier::PI * 1.1;       // 固定角度(弧度)
    opt.lower_bounds_first = {};
    opt.upper_bounds_first = {};
    opt.x_init_first = {};
    opt.lower_bounds_second = {opt.target_length - 2000, opt.fixed_angle - 0.5};
    opt.upper_bounds_second = {opt.target_length + 20000, opt.fixed_angle + 2};
    opt.x_init_second = {};

    /* 
    无梯度算法（不需要提供导数）
    局部优化算法
    nlopt::LN_COBYLA: 通过线性近似的约束优化（您目前使用的）
    nlopt::LN_AUGLAG: 增广拉格朗日方法，使用其他无梯度算法作为子算法
    nlopt::LN_AUGLAG_EQ: 增广拉格朗日方法（只处理等式约束）

    全局优化算法
    nlopt::GN_ISRES: 改进的随机排序进化策略，支持非线性约束
    nlopt::GN_ORIG_DIRECT: 原始DIRECT算法，支持约束
    nlopt::GN_ORIG_DIRECT_L: 局部偏好的DIRECT算法，支持约束
    nlopt::GN_AGS: 自适应全局搜索算法，支持约束

    梯度算法（需要提供导数）
    局部优化算法
    nlopt::LD_SLSQP: 序列最小二乘二次规划，支持非线性约束
    nlopt::LD_MMA: 移动渐近线法，支持约束
    nlopt::LD_CCSAQ: 保守凸可分离近似法，支持约束
    nlopt::LD_AUGLAG: 增广拉格朗日方法（使用导数），需要其他局部梯度算法作为子算法

    全局优化算法
    nlopt::GD_MLSL: 多层次单链接算法，可以处理约束
    nlopt::GD_MLSL_LDS: 带低差异序列的MLSL，更强的全局搜索能力
    */

    /* 
    不支持联合优化这种较多参数
    GN_ORIG_DIRECT
    GN_ORIG_DIRECT_L
    GN_AGS
    不支持梯度算法
    */
     
    /** 较好
     * LN_COBYLA
     * LN_AUGLAG_EQ
     */
    opt.layer = true;                // 是否为分层优化
    opt.use_unified_opt = true;  // 使用集合优化
    opt.opt_type = 0;  // 0: 3 order
    opt.algo_first = nlopt::LN_AUGLAG_EQ;    // 优化算法
    opt.algo_second = nlopt::GN_ISRES;

    std::vector<std::array<double, 4>> paths = bezier::measureTime(
        [&]() {return bezier::generateBezierPath(init, opt);},
         "bezier_opt");
    
    // out路径需要根据实际执行路径修改
    bezier::outputMultiPathPoints(paths, init.target_point, opt.target_radius, opt.num_samlpes, "out");
    
    return 0;
}